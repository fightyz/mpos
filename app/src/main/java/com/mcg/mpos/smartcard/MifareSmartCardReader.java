package com.mcg.mpos.smartcard;import java.io.IOException;import android.app.Activity;import android.app.PendingIntent;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.IntentFilter.MalformedMimeTypeException;import android.nfc.NfcAdapter;import android.nfc.Tag;import android.nfc.tech.IsoDep;import android.nfc.tech.MifareClassic;import android.nfc.tech.Ndef;import android.nfc.tech.NfcA;import android.nfc.tech.NfcB;import android.nfc.tech.NfcF;import android.util.Log;import com.mcg.mpos.application.BaseApplication;import com.mcg.mpos.utils.StringEncode;import com.mobilesecuritycard.openmobileapi.Channel;import com.mobilesecuritycard.openmobileapi.Reader;import com.mobilesecuritycard.openmobileapi.Session;public class MifareSmartCardReader {	private NfcAdapter mAdapter;// 用于存储NfC适配器对象，用于开启NFC前台模式	private PendingIntent mPendingIntent;// 用于设置Intent	private IntentFilter[] mFilters;// 用于设置要捕获的NDEF_DISCOVERED的Intent的MIME类型	private String[][] mTechLists;// 用于设置要捕获的Technology	private Tag mTag;	private static MifareSmartCardReader mSelf;	private IsoDep mIsoDep;	private boolean mIsTagLost = false;	public Session mSession;	public Reader[] mReader;	public Reader r;	private MifareSmartCardReader() {	}	public static MifareSmartCardReader getInstance() {		if (null == mSelf) {			mSelf = new MifareSmartCardReader();		}		return mSelf;	}	public void init() {		Context context = BaseApplication.getInstance().getApplicationContext();		mAdapter = NfcAdapter.getDefaultAdapter(context);// 获得NFC适配器对象		// 创建PendingIntent用于捕获NFC标签发现的Intent		IntentFilter ndef = new IntentFilter(NfcAdapter.ACTION_NDEF_DISCOVERED);// 构建一个Intent，设置捕获NDEF_DICOVERED的Intent		try {			ndef.addDataType("*/*");		} catch (MalformedMimeTypeException e) {			// throw new Exception("设置NFC消息捕获失败！NFC适配器可能未打开打开");		}		mFilters = new IntentFilter[] { ndef };		mTechLists = new String[][] { new String[] { NfcA.class.getName() },				new String[] { NfcB.class.getName() },				new String[] { NfcF.class.getName() },				new String[] { Ndef.class.getName() },				new String[] { MifareClassic.class.getName() } };// 设置要捕获的NFC																	// Technology	}	public void open() throws IOException {		// if (null != mIsoDep) {		// if (!mIsoDep.isConnected()) {		// mIsoDep.connect();		// }		// }	}	public void close() {		// if (null != mIsoDep) {		// try {		// mIsoDep.close();		// } catch (IOException e) {		// // TODO Auto-generated catch block		// e.printStackTrace();		// }		// }	}	public void resume(Activity activity) {		Context context = BaseApplication.getInstance().getApplicationContext();		if (mAdapter != null) {			mPendingIntent = PendingIntent.getActivity(context, 0, new Intent(					context, activity.getClass())					.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP), 0);			mAdapter.enableForegroundDispatch(activity, mPendingIntent,					mFilters, mTechLists);		}	}	public void pause(Activity activity) {		if (mAdapter != null)			mAdapter.disableForegroundDispatch(activity);	}	public byte[] getDevInfo() throws IOException {		return null;	}	public byte[] resetDevice() throws IOException {		return null;	}	public byte[] sendCommand(byte[] command) throws IOException {		byte result[] = null;		// Log.d("SmartCardReader","send command " +		// StringEncode.hexEncode(command));		// if (null == mIsoDep || !mIsoDep.isConnected()) {		// throw new IOException("未检测到银行卡！");		// }		try {			result = SmartCardReader.getInstance().mBasicChannel					.transmit(command);		} catch (IOException e) {			e.printStackTrace();			mIsTagLost = true;			throw e;		}		Log.d("SmartCardReader", "response " + StringEncode.hexEncode(result));		return result;	}	public void destroy(Context context) {	}	private Reader getESE(Reader[] reader) {		if (reader == null || reader.length < 1) {			return null;		}		for (int i = 0; i < reader.length; i++) {			if (reader[i].getName().startsWith("eSEContactless")) {				return reader[i];			}		}		return null;	}	public void prepareSend(Tag tag) throws IOException {		// mIsTagLost = false;		// mIsoDep = IsoDep.get(tag);		// if (!mIsoDep.isConnected()) {		// try {		// mIsoDep.connect();		// } catch (IOException e) {		// e.printStackTrace();		// }		// }		if (BaseApplication.getInstance() != null) {			if (BaseApplication.getInstance().getSeService() != null) {				if (BaseApplication.getInstance().getSeService().getReaders() != null) {					mReader = BaseApplication.getInstance().getSeService()							.getReaders();				}			}		}		r = getESE(mReader);		if (r != null) {			if (r.isSecureElementPresent()) {				try {					mSession = r.openSession();				} catch (IOException e) {					e.printStackTrace();				}			}		}	}	public boolean isConnect() {		// if (mIsTagLost) {		// return false;		// }		// if (null != mIsoDep) {		// if (mIsoDep.isConnected()) {		// return true;		// } else {		// mIsoDep = null;		// return false;		// }		// } else {		// return false;		// }		if (r!= null &&r.isSecureElementPresent()) {			return true;		} else {			return false;		}	}}